// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lufia/enttut/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldID, id))
}

// WalletID applies equality check predicate on the "wallet_id" field. It's identical to WalletIDEQ.
func WalletID(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldWalletID, v))
}

// PaidDate applies equality check predicate on the "paid_date" field. It's identical to PaidDateEQ.
func PaidDate(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaidDate, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// Memo applies equality check predicate on the "memo" field. It's identical to MemoEQ.
func Memo(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldMemo, v))
}

// WalletIDEQ applies the EQ predicate on the "wallet_id" field.
func WalletIDEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldWalletID, v))
}

// WalletIDNEQ applies the NEQ predicate on the "wallet_id" field.
func WalletIDNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldWalletID, v))
}

// WalletIDIn applies the In predicate on the "wallet_id" field.
func WalletIDIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldWalletID, vs...))
}

// WalletIDNotIn applies the NotIn predicate on the "wallet_id" field.
func WalletIDNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldWalletID, vs...))
}

// PaidDateEQ applies the EQ predicate on the "paid_date" field.
func PaidDateEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaidDate, v))
}

// PaidDateNEQ applies the NEQ predicate on the "paid_date" field.
func PaidDateNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaidDate, v))
}

// PaidDateIn applies the In predicate on the "paid_date" field.
func PaidDateIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaidDate, vs...))
}

// PaidDateNotIn applies the NotIn predicate on the "paid_date" field.
func PaidDateNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaidDate, vs...))
}

// PaidDateGT applies the GT predicate on the "paid_date" field.
func PaidDateGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaidDate, v))
}

// PaidDateGTE applies the GTE predicate on the "paid_date" field.
func PaidDateGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaidDate, v))
}

// PaidDateLT applies the LT predicate on the "paid_date" field.
func PaidDateLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaidDate, v))
}

// PaidDateLTE applies the LTE predicate on the "paid_date" field.
func PaidDateLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaidDate, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldAmount, v))
}

// MemoEQ applies the EQ predicate on the "memo" field.
func MemoEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldMemo, v))
}

// MemoNEQ applies the NEQ predicate on the "memo" field.
func MemoNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldMemo, v))
}

// MemoIn applies the In predicate on the "memo" field.
func MemoIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldMemo, vs...))
}

// MemoNotIn applies the NotIn predicate on the "memo" field.
func MemoNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldMemo, vs...))
}

// MemoGT applies the GT predicate on the "memo" field.
func MemoGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldMemo, v))
}

// MemoGTE applies the GTE predicate on the "memo" field.
func MemoGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldMemo, v))
}

// MemoLT applies the LT predicate on the "memo" field.
func MemoLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldMemo, v))
}

// MemoLTE applies the LTE predicate on the "memo" field.
func MemoLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldMemo, v))
}

// MemoContains applies the Contains predicate on the "memo" field.
func MemoContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldMemo, v))
}

// MemoHasPrefix applies the HasPrefix predicate on the "memo" field.
func MemoHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldMemo, v))
}

// MemoHasSuffix applies the HasSuffix predicate on the "memo" field.
func MemoHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldMemo, v))
}

// MemoEqualFold applies the EqualFold predicate on the "memo" field.
func MemoEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldMemo, v))
}

// MemoContainsFold applies the ContainsFold predicate on the "memo" field.
func MemoContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldMemo, v))
}

// HasWallet applies the HasEdge predicate on the "wallet" edge.
func HasWallet() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WalletTable, WalletColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWalletWith applies the HasEdge predicate on the "wallet" edge with a given conditions (other predicates).
func HasWalletWith(preds ...predicate.Wallet) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newWalletStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.NotPredicates(p))
}
